.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XagraEditor 3"
.TH XagraEditor 3 "2009-07-10" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.Sh "startGrammar"
.IX Subsection "startGrammar"
create a new grammar
.Sh "checkGrammar"
.IX Subsection "checkGrammar"
check if grammar exists
.Sh "addSymbol"
.IX Subsection "addSymbol"
insert terminal or non-terminal symbol
.Sh "addAttribute"
.IX Subsection "addAttribute"
insert attribute
.Sh "addProduction"
.IX Subsection "addProduction"
insert production
.Sh "addComputation"
.IX Subsection "addComputation"
insert computation
.Sh "addArgument"
.IX Subsection "addArgument"
insert argument
.Sh "addFunction"
.IX Subsection "addFunction"
insert function
.Sh "addImport"
.IX Subsection "addImport"
insert importation
.Sh "addProdComp"
.IX Subsection "addProdComp"
insert computation and associate it with a production
.Sh "addCompArg"
.IX Subsection "addCompArg"
insert argument and associate it with a computation
.Sh "editSymbol"
.IX Subsection "editSymbol"
edit symbol
.Sh "editAttribute"
.IX Subsection "editAttribute"
edit attribute
.Sh "editProduction"
.IX Subsection "editProduction"
edit production
.Sh "editComputation"
.IX Subsection "editComputation"
edit computation
.Sh "editArgument"
.IX Subsection "editArgument"
edit argument
.Sh "editFunction"
.IX Subsection "editFunction"
edit function
.Sh "modifySymbol"
.IX Subsection "modifySymbol"
modify symbol
.Sh "modifyAttribute"
.IX Subsection "modifyAttribute"
modify attribute
.Sh "modifyProduction"
.IX Subsection "modifyProduction"
modify production
.Sh "modifyComputation"
.IX Subsection "modifyComputation"
modify computation
.Sh "modifyArgument"
.IX Subsection "modifyArgument"
modify argument
.Sh "modifyFunction"
.IX Subsection "modifyFunction"
modify function
.Sh "dualSymbol"
.IX Subsection "dualSymbol"
remove or search for a symbol
.Sh "dualAttribute"
.IX Subsection "dualAttribute"
remove or search for an attribute
.Sh "dualProduction"
.IX Subsection "dualProduction"
remove or search for a production
.Sh "dualFunction"
.IX Subsection "dualFunction"
remove or search for a function
.Sh "dualComputation"
.IX Subsection "dualComputation"
remove or search for a computation
.Sh "dualArgument"
.IX Subsection "dualArgument"
remove or search for an argument
.Sh "removeImport"
.IX Subsection "removeImport"
remove an importation
.Sh "viewComputations"
.IX Subsection "viewComputations"
show all the computations of a production
.Sh "viewArguments"
.IX Subsection "viewArguments"
show all the arguments of a computation
.Sh "showSymbols"
.IX Subsection "showSymbols"
returns all symbols
.Sh "showAttributes"
.IX Subsection "showAttributes"
returns all attributes
.Sh "showProductions"
.IX Subsection "showProductions"
returns all productions
.Sh "showSymbols"
.IX Subsection "showSymbols"
returns all functions
.Sh "showImportations"
.IX Subsection "showImportations"
returns all importations
.Sh "showComputations"
.IX Subsection "showComputations"
returns all computations
.Sh "showArguments"
.IX Subsection "showArguments"
returns all arguments
.Sh "compOfProd"
.IX Subsection "compOfProd"
associates a computation to a production
.Sh "argOfComp"
.IX Subsection "argOfComp"
associates an argument to a computation
.SH "NAME"
XagraEditor \- Perl extension for blah blah blah
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use XagraEditor;
\&  blah blah blah
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Stub documentation for XagraEditor, created by h2xs. It looks like the
author of the extension was negligent enough to leave the stub
unedited.
.PP
Blah blah blah.
.Sh "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mention other useful documentation such as the documentation of
related modules or operating system documentation (such as man pages
in \s-1UNIX\s0), or any relevant external documentation such as RFCs or
standards.
.PP
If you have a mailing list set up for your module, mention it here.
.PP
If you have a web site set up for your module, mention it here.
.SH "AUTHOR"
.IX Header "AUTHOR"
Hugo Areias, <Hades@local>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2009 by Hugo Areias
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.10.0 or,
at your option, any later version of Perl 5 you may have available.
